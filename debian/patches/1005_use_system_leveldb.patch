Description: Use system leveldb, which does not have libmemenv.a
 libmemenv.a only used in testing. When libmemenv.a is added, edit this patch
Author: Luke-Jr <luke@dashjr.org>, Scott Howard <showard@debian.org>
Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=700910
Index: bitcoin/src/makefile.unix
===================================================================
--- bitcoin.orig/src/makefile.unix	2013-05-31 18:06:01.480339115 -0400
+++ bitcoin/src/makefile.unix	2013-05-31 18:09:05.912343499 -0400
@@ -46,6 +46,10 @@
  -Wl,-B$(LMODE) \
    -l boost_unit_test_framework$(BOOST_LIB_SUFFIX)
 
+TESTLIBS += \
+ -Wl,-B$(LMODE) \
+   -l boost_unit_test_framework$(BOOST_LIB_SUFFIX)
+
 ifndef USE_UPNP
 	override USE_UPNP = -
 endif
@@ -110,8 +114,7 @@
 # adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
 xLDFLAGS=$(LDHARDENING) $(LDFLAGS)
 
-OBJS= \
-    leveldb/libleveldb.a \
+BASEOBJS := \
     obj/alert.o \
     obj/version.o \
     obj/checkpoints.o \
@@ -120,7 +123,6 @@
     obj/crypter.o \
     obj/key.o \
     obj/db.o \
-    obj/init.o \
     obj/keystore.o \
     obj/main.o \
     obj/net.o \
@@ -140,9 +142,18 @@
     obj/hash.o \
     obj/bloom.o \
     obj/noui.o \
-    obj/leveldb.o \
     obj/txdb.o
 
+OBJS := \
+    obj/leveldb.o \
+    obj/init.o \
+    $(BASEOBJS)
+
+TESTOBJS := \
+    obj-test/leveldb.o \
+    $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp)) \
+    $(BASEOBJS)
+
 
 all: bitcoind
 
@@ -153,11 +164,10 @@
 # LevelDB support
 #
 MAKEOVERRIDES =
-LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
-DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
-DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
-leveldb/libleveldb.a:
-	@echo "Building LevelDB ..." && cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT="$(xCXXFLAGS)" libleveldb.a libmemenv.a && cd ..
+LIBS += -lleveldb $(CURDIR)/leveldb/libmemenv.a
+TESTDEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
+leveldb/libmemenv.a:
+	@echo "Building LevelDB ..." && cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT="$(xCXXFLAGS)" libmemenv.a && cd ..
 
 # auto-generated dependencies:
 -include obj/*.P
@@ -168,27 +178,29 @@
 version.cpp: obj/build.h
 DEFS += -DHAVE_BUILD_INFO
 
-obj/%.o: %.cpp
-	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
+P_TO_D = \
 	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
-	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
+	  sed -e 's/\#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
 	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
 	  rm -f $(@:%.o=%.d)
 
-bitcoind: $(OBJS:obj/%=obj/%)
-	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)
+obj/%.o: %.cpp
+	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
+	$(P_TO_D)
 
-TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))
+bitcoind: $(OBJS)
+	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)
 
 obj-test/%.o: test/%.cpp
 	$(CXX) -c $(TESTDEFS) $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
-	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
-	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
-	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
-	  rm -f $(@:%.o=%.d)
+	$(P_TO_D)
+
+obj-test/leveldb.o: leveldb.cpp
+	$(CXX) -c $(TESTDEFS) $(xCXXFLAGS) -DTEST_SUITE -MMD -MF $(@:%.o=%.d) -o $@ $<
+	$(P_TO_D)
 
-test_bitcoin: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
-	$(LINK) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ $(TESTLIBS) $(xLDFLAGS) $(LIBS)
+test_bitcoin: $(TESTOBJS)
+	$(LINK) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ $(TESTLIBS) $(xLDFLAGS) $(LIBS) $$PWD/leveldb/libmemenv.a
 
 clean:
 	-rm -f bitcoind test_bitcoin
Index: bitcoin/bitcoin-qt.pro
===================================================================
--- bitcoin.orig/bitcoin-qt.pro	2013-05-31 18:06:01.480339115 -0400
+++ bitcoin/bitcoin-qt.pro	2013-05-31 18:11:09.928346446 -0400
@@ -98,11 +98,10 @@
     QTPLUGIN += qcncodecs qjpcodecs qtwcodecs qkrcodecs qtaccessiblewidgets
 }
 
-INCLUDEPATH += src/leveldb/include src/leveldb/helpers
-LIBS += $$PWD/src/leveldb/libleveldb.a $$PWD/src/leveldb/libmemenv.a
+LIBS += -lleveldb
 !win32 {
     # we use QMAKE_CXXFLAGS_RELEASE even without RELEASE=1 because we use RELEASE to indicate linking preferences not -O preferences
-    genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX $(MAKE) OPT=\"$$QMAKE_CXXFLAGS $$QMAKE_CXXFLAGS_RELEASE\" libleveldb.a libmemenv.a
+    genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX $(MAKE) OPT=\"$$QMAKE_CXXFLAGS $$QMAKE_CXXFLAGS_RELEASE\" libmemenv.a
 } else {
     # make an educated guess about what the ranlib command is called
     isEmpty(QMAKE_RANLIB) {
@@ -111,12 +110,12 @@
     LIBS += -lshlwapi
     genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) OPT=\"$$QMAKE_CXXFLAGS $$QMAKE_CXXFLAGS_RELEASE\" libleveldb.a libmemenv.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libleveldb.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libmemenv.a
 }
-genleveldb.target = $$PWD/src/leveldb/libleveldb.a
+genleveldb.target = $$PWD/src/leveldb/libmemenv.a
 genleveldb.depends = FORCE
-PRE_TARGETDEPS += $$PWD/src/leveldb/libleveldb.a
+PRE_TARGETDEPS += $$PWD/src/leveldb/libmemenv.a
 QMAKE_EXTRA_TARGETS += genleveldb
 # Gross ugly hack that depends on qmake internals, unfortunately there is no other way to do it.
-QMAKE_CLEAN += $$PWD/src/leveldb/libleveldb.a; cd $$PWD/src/leveldb ; $(MAKE) clean
+QMAKE_CLEAN += $$PWD/src/leveldb/libmemenv.a; cd $$PWD/src/leveldb ; $(MAKE) clean
 
 # regenerate src/build.h
 !win32|contains(USE_BUILD_INFO, 1) {
Index: bitcoin/src/leveldb.cpp
===================================================================
--- bitcoin.orig/src/leveldb.cpp	2013-05-31 18:06:01.480339115 -0400
+++ bitcoin/src/leveldb.cpp	2013-05-31 18:06:01.476339115 -0400
@@ -8,7 +8,9 @@
 #include <leveldb/env.h>
 #include <leveldb/cache.h>
 #include <leveldb/filter_policy.h>
+#ifdef TEST_SUITE
 #include <memenv/memenv.h>
+#endif
 
 #include <boost/filesystem.hpp>
 
@@ -43,8 +45,12 @@
     options = GetOptions(nCacheSize);
     options.create_if_missing = true;
     if (fMemory) {
+#ifdef TEST_SUITE
         penv = leveldb::NewMemEnv(leveldb::Env::Default());
         options.env = penv;
+#else
+        throw std::runtime_error("CLevelDB(): compiled without memenv support");
+#endif
     } else {
         if (fWipe) {
             printf("Wiping LevelDB in %s\n", path.string().c_str());
